# SPDX-FileCopyrightText: 2025-present Mike Boyle <michael.oliver.boyle@gmail.com>
#
# SPDX-License-Identifier: MIT

name: CI

on:
  push:
    branches:
      - main
    tags: ["*"]
  pull_request:

concurrency:
  group: test-${{ github.head_ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  test-and-release:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    # Provide an output so the next job knows whether to release
    outputs:
      RUN_RELEASE: ${{ steps.release_check.outputs.run_release }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: pip install --upgrade pip hatch

      - name: Run tests
        run: |
          hatch run tests:test
          # hatch run marimo:check

      # - name: Export notebook
      #   run: hatch run marimo:convert

      - name: Determine bump type
        id: version
        run: |
          OLD_VERSION="$(hatch version)"
          BUMP_TYPE="patch"
          if [[ "$OLD_VERSION" == *"a"* ]]; then
              BUMP_TYPE="a"
          elif [[ "$OLD_VERSION" == *"b"* ]]; then
              BUMP_TYPE="b"
          fi
          COMMIT_MSG="$(git log -1 --pretty=%B)"
          if [[ "$COMMIT_MSG" == *"#major"* ]]; then
              BUMP_TYPE="major"
          elif [[ "$COMMIT_MSG" == *"#minor"* ]]; then
              BUMP_TYPE="minor"
          elif [[ "$COMMIT_MSG" == *"#patch"* ]]; then
              BUMP_TYPE="patch"
          elif [[ "$COMMIT_MSG" == *"#alpha"* ]]; then
              BUMP_TYPE="a"
          elif [[ "$COMMIT_MSG" == *"#beta"* ]]; then
              BUMP_TYPE="b"
          fi
          echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          hatch version ${{ steps.version.outputs.BUMP_TYPE }}
          NEW_VERSION="$(hatch version | tr -d '\n')"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Determine if release steps should run
        id: release_check
        run: |
          # Default to skipping release steps
          echo "run_release=false" >> $GITHUB_OUTPUT

          # If the ref is main, check the commit message for [skip release]
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            COMMIT_MSG="$(git log -1 --pretty=%B)"
            if [[ "$COMMIT_MSG" != *"[skip release]"* ]]; then
              echo "run_release=true" >> $GITHUB_OUTPUT
              echo "run_release=true"
            fi
          fi

      - name: Commit version bump
        if: ${{ steps.release_check.outputs.run_release == 'true' }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add src/sxscatalog/__about__.py
          git commit -m "Bump version to ${{ steps.bump_version.outputs.NEW_VERSION }}"
          git push

      - name: Create GitHub Release
        if: ${{ steps.release_check.outputs.run_release == 'true' }}
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.bump_version.outputs.NEW_VERSION }}
          release_name: v${{ steps.bump_version.outputs.NEW_VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Upload Pages Artifact
      #   if: ${{ steps.release_check.outputs.run_release == 'true' }}
      #   uses: actions/upload-pages-artifact@v3
      #   with:
      #     path: scripts/catalog_notebook_output

      # - name: Deploy to GitHub Pages
      #   if: ${{ steps.release_check.outputs.run_release == 'true' }}
      #   id: deployment
      #   uses: actions/deploy-pages@v4
      #   with:
      #     artifact_name: github-pages

  publish-to-pypi:
    if: ${{ needs.test-and-release.outputs.RUN_RELEASE == 'true' }}
    needs: test-and-release
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/sxscatalog
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # trusted publishing is set up for this repo, so no credentials are needed
        with:
          repository-url: https://test.pypi.org/legacy/
